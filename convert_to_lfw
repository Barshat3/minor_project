import os
import cv2
from facenet_pytorch import MTCNN
from PIL import Image

# Initialize MTCNN for face detection and alignment
mtcnn = MTCNN(image_size=250, margin=20, post_process=False)  # LFW uses 250x250 images

def convert_folder_to_lfw(input_folder, output_folder):
    """
    Convert all images in a folder to match LFW standard.
    Args:
        input_folder (str): Path to the input folder containing images.
        output_folder (str): Path to save the converted images.
    """
    # Ensure the output folder exists
    os.makedirs(output_folder, exist_ok=True)

    for img_name in os.listdir(input_folder):
        input_path = os.path.join(input_folder, img_name)

        # Skip non-image files
        if not img_name.lower().endswith((".jpg", ".jpeg", ".png")):
            print(f"Skipping non-image file: {img_name}")
            continue

        # Load the image
        img = cv2.imread(input_path)
        if img is None:
            print(f"Error: Could not load image {img_name}. Skipping.")
            continue

        # Convert BGR (OpenCV format) to RGB
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Detect and align the face
        face = mtcnn(img_rgb)
        if face is not None:
            # Convert the tensor to a PIL image
            face_img = Image.fromarray(face.permute(1, 2, 0).byte().numpy())

            # Save the aligned face in LFW format
            output_path = os.path.join(output_folder, img_name)
            face_img.save(output_path)
            print(f"Processed and saved: {output_path}")
        else:
            print(f"No face detected in {img_name}. Skipping.")

# Paths for input and output folders
input_folder = "/home/barshat/Desktop/minor_project/input_img"  
output_folder = "/home/barshat/Desktop/minor_project/output_img"  

# Convert all images in the folder
convert_folder_to_lfw(input_folder, output_folder)
